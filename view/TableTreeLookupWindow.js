/*
 * File: app/view/BasicLookupWindow.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('EvolveQueryEditor.view.TableTreeLookupWindow', {
    extend: 'Ext.window.Window',

    requires: [
        'EvolveQueryEditor.model.Query',
        'EvolveQueryEditor.model.FilterModel',
        'EvolveQueryEditor.model.FilterValueModel'
    ],

    height: 322,
    itemId: 'TableTreeLookupWindow',
    id: 'qnaWindowTableLookup',
    width: 400,
    layout: {
        type: 'border'
    },
    title: 'Lookup',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'container',
                    flex: 1,
                    region: 'south',
                    height: 150
                },
                {
                    xtype: 'treepanel',
                    flex: 6,
                    region: 'center',
                    itemId: 'treeTables',
                    frameHeader: false,
                    header: false,
                    lines: true,
                    useArrows: true,
                    title: 'Table Hierarchy',
                    rootVisible: false,
                    listeners: {
                        itemdblclick: { fn: me.itemSelect, scope: me }
                    }
                    //store: 'TableStore',
                    /*
                    columns: [{
                        xtype: 'treecolumn',
                        dataIndex: 'name',
                        flex: 1
                    }]
                    */
                }
            ],
            listeners: {
                show: {
                    fn: me.onWindowShow,
                    scope: me
                },
            }
        });

        me.callParent(arguments);
    },
    
    onWindowShow: function (component, eOpts) {
        //this.down('#treeTables').store.load();

        var parent = this;
        var storeModel = parent.viewFilters.store.getAt(parent.filterModelIndex);
        if (storeModel.isTablesSet !== true) { //!== true means undefined
            var grid = this.down('#treeTables');

            grid.setLoading(true, "Loading Table hierarchy ...");

            Ext.Ajax.request({
                url: EvolveQueryEditor.model.Query.serverUrlBase + '&method=LookupTables',
                jsonData: {
                    clientToken: EvolveQueryEditor.model.Query.clientToken,
                    query: {
                        productCode: EvolveQueryEditor.model.Query.getProductCode(),
                        tableCode: '',
                        mode: EvolveQueryEditor.model.Query.getQueryType(),
                        filters: EvolveQueryEditor.model.Query.getFilters()
                    }
                },
                success: function (response) {
                    grid.setLoading(false);
                    var data = Ext.decode(response.responseText);
                    storeModel.isTablesSet = true;
                    parent.down('#treeTables').setRootNode(data.data);
                },
                failure: function (response, options) {
                    grid.setLoading(false);
                    alert(response.statusText);
                }
            });
        }
    },
    
    itemSelect: function(grid, record, item, index, e, eOpts) {
        this.hide();

        EvolveQueryEditor.model.Query.setTable(record.raw.filtercode, record.get('text'), record.raw.namePlusCode);
        
        this.onLookupComplete(this.scope);
    }
}, function (Cls) {
    Cls.Instance = EvolveQueryEditor.view.TableTreeLookupWindow.create();
});