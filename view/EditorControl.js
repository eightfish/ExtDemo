/*
 * File: app/view/EditorControl.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('EvolveQueryEditor.model.FieldTreeModel', {
    extend: 'Ext.data.TreeModel',
    requires: [
        'Ext.data.NodeInterface'
    ]
},
function () {
    Ext.data.NodeInterface.decorate(this);
});

Ext.define('EvolveQueryEditor.view.EditorControl', {
    extend: 'Ext.panel.Panel',

    requires: [
        'Infor.button.Button',
        'EvolveQueryEditor.model.FieldDataTypeModel',
        'EvolveQueryEditor.model.ExtractionTypeModel',
        'EvolveQueryEditor.model.ScalingFactorModel',
        'EvolveQueryEditor.model.SortingTypeModel',
        'EvolveQueryEditor.model.Query',
        'EvolveQueryEditor.model.OutputFieldModel',
		'EvolveQueryEditor.model.OutputFieldSortingModel',
        'EvolveQueryEditor.model.ComparisonOperatorModel',
		'EvolveQueryEditor.model.FilterModeModel',
		'EvolveQueryEditor.model.FilterOptionsModel',
        'EvolveQueryEditor.model.FilterModel',
		
        'EvolveQueryEditor.store.ScalingFactorStore',
        'EvolveQueryEditor.store.ProductStore',
        'EvolveQueryEditor.store.SuperFieldsStore',
        'EvolveQueryEditor.store.ReportTypeStore',
        'EvolveQueryEditor.store.SortingTypeStore',
        'EvolveQueryEditor.store.MandatoryFieldsStore',
        'EvolveQueryEditor.store.BasicLookupStore',
        'EvolveQueryEditor.store.QueryContextStore',

        'EvolveQueryEditor.view.BasicLookupWindow',
        'EvolveQueryEditor.view.PeriodLookupWindow',
        'EvolveQueryEditor.view.TableTreeLookupWindow',
        'EvolveQueryEditor.view.EvolveProgressDialog',
        "EvolveQueryEditor.view.ExtractionTypeWindow",
		'EvolveQueryEditor.view.SortingWindow',
		'EvolveQueryEditor.view.FilterOptionsWindow',
		
		'EvolveQueryEditor.util.QAAMsg',
		'EvolveQueryEditor.util.HtmlUtils',
		'EvolveQueryEditor.util.UX'
    ],

    title: 'Q&A Query Editor',
    header: false,
    layout: 'border',
    width: 717,
    height: 455,
    id: 'qnaPanelQueryEditor',

    /**
     * @cfg {Infor.BI.dashboards.IDialogContainer} dialogContainer Reference to object providing dashboard functionality. (required)
     */
    dialogContainer: undefined,

    initComponent: function () {
        this.dialogContainer.UX.showLoadingMask("Loading...");
        var me = this;

        me.setQueryDefinition(EvolveQueryEditor.util.HtmlUtils.convertLTandGT(me.dialogConfig.query));
		EvolveQueryEditor.util.UX.init(this.dialogContainer.UX);

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    region: 'north',
                    split: false,
                    height: 240,
                    margin: '0 0 20 0',
                    layout: {
                        type: 'border'
                    },
                    collapsible: false,
                    titleCollapse: true,
                    itemId: 'qnaFiltersPanel',
                    id: 'qnaPanelFilters',
                    items: [
                        {
                            xtype: 'panel',
                            region: 'north',
                            height: 48,
                            layout: {
                                type: 'border'
                            },
                            header: false,
                            title: 'My Panel',
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    region: 'west',
                                    layout: {
                                        type: 'vbox',
                                        align: 'left'
                                    },
                                    items: [
                                        {

                                            xtype: 'combobox',
                                            tpl: '<tpl for="."><div class="x-boundlist-item"><span style="display: inline-block; height: 50px;line-height: 50px;vertical-align: middle"><img style="vertical-align: middle" src="{TypeImage}"/>&nbsp;&nbsp;{Caption}</span></div></tpl>',
                                            itemId: 'cbQueryTypes',
                                            itemId: 'cbQueryTypes',
                                            id: 'qnaComboBoxQueryType',
                                            fieldLabel: EvolveQueryEditor.util.UX.getLocalized('report type'),
                                            labelWidth: 80,
                                            minListWidth: 200,
                                            listWidth: 200,
                                            margin: '0 10 0 0',
                                            editable: false,
                                            displayField: 'Caption',
                                            queryMode: 'local',
                                            store: EvolveQueryEditor.store.ReportTypeStore.create(me.dialogContainer),
                                            valueField: 'Type',
                                            value: EvolveQueryEditor.model.Query.getQueryType(),
                                            listeners: {
                                                select: {
                                                    fn: me.onComboboxSelect,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    region: 'east',
                                    layout: {
                                        type: 'vbox',
                                        align: 'right'
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            tpl: '<tpl for="."><div class="x-boundlist-item"><span style="display: inline-block; height: 26px;line-height: 26px;vertical-align: middle">{Description}</span></div></tpl>',
                                            disabled: EvolveQueryEditor.model.Query.getQueryType() === undefined,
                                            itemId: 'cbProducts',
                                            id: 'qnaComboBoxProduct',
                                            width: 301,
                                            fieldLabel: EvolveQueryEditor.util.UX.getLocalized('Product'),
                                            labelWidth: 60,
                                            editable: false,
                                            displayField: 'Description',
                                            store: EvolveQueryEditor.model.Query.getProductStore(),
                                            valueField: 'Code',
                                            value: EvolveQueryEditor.model.Query.getProductCode(),
                                            listeners: {
                                                select: {
                                                    fn: me.onCbProductsSelect,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'panel',
                                    region: 'center',
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            id: 'filterToolbar',
                            cls: 'x-toolbar-content-connections',
                            region: 'center',
                            itemId: 'qnaGridFilters',
                            id: 'qnaGridFilters',
                            selModel: {
                                mode: 'MULTI'
                            },
                            viewConfig: {
                                listeners: {
                                    itemkeydown: {
                                        fn: me.onFiltersKeyPress,
                                        scope: me
                                    }
                                },
                                getRowClass: function (rec, idx, rowPrms, ds) {
                                    return rec.isOptionalFilter() === false ? 'evolveQueryGridBoldRow' : 'evolveQueryGridRow';
                                }
                            },
                            store: EvolveQueryEditor.model.Query.getFilterStore(),
                            dockedItems: [{
                                flex: 1,
                                dock: 'top',
                                xtype: 'toolbar',
                                cls: 'x-toolbar-content-connections',
                                items: [
								        {
								            xtype: 'label',
								            text: 'Filters',
								            style: 'font-weight: bold'
								        },
                                        { xtype: 'tbfill' },
                                        {
                                            xtype: 'infor-button',
                                            ui: 'icon-button',
                                            action: 'delete',
                                            tooltip: Infor.Application.getLocalized('Delete'),
                                            iconCls: 'contentConnectionsListButtonRemove',
                                            handler: function (event, toolEl, panel) {
                                                me.onDeleteFiltersClicked();
                                            }
                                        }
                                    ]
                                }
                            ],
                     
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'name',
                                    text: 'Name',
                                    flex: 15,
									sortable: false,								   
								    menuDisabled: true
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'from',
                                    text: 'Value From',
                                    flex: 25,
									sortable: false,								   
								    menuDisabled: true,
								    getEditor:function(record){
								        if (record.isTable() || record.isSuperFieldFilter()) {
								            return null;
								        } else {
								            var qnaTextFieldFilterFrom = Ext.getCmp('qnaTextFieldFilterFrom');
								            if (Ext.isEmpty(qnaTextFieldFilterFrom)) {
								                qnaTextFieldFilterFrom = Ext.create('Ext.grid.CellEditor', { field: Ext.create('Ext.form.field.Text', { id: 'qnaTextFieldFilterFrom', selectOnFocus: true }) });
								            }
								            return qnaTextFieldFilterFrom;
								        }
								    },
								    renderer : Ext.util.Format.htmlEncode //Support to display html cahr directlry, for example, <, >

                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'to',
                                    text: 'Value To',
                                    flex: 25,
									sortable: false,								   
									menuDisabled: true,
									getEditor: function (record) {
									    if (record.isTable() || record.isSuperFieldFilter()) {
									        return null;
									    } else {
									        var qnaTextFieldFilterTo = Ext.getCmp('qnaTextFieldFilterTo');
									        if (Ext.isEmpty(qnaTextFieldFilterTo)) {
									            qnaTextFieldFilterTo = Ext.create('Ext.grid.CellEditor', { field: Ext.create('Ext.form.field.Text', { id: 'qnaTextFieldFilterTo', selectOnFocus: true }) });
									        }
									        return qnaTextFieldFilterTo;
									    }
									},
									renderer : Ext.util.Format.htmlEncode //Support to display html cahr directlry, for example, <, >

                                },
                                {
                                    xtype: 'inforactioncolumn',
                                    flex: 1,
                                    sortable: false,
                                    align: 'center',
                                    tdCls: 'evolveQueryGridActionColumnVerticalAlign',
                                    menuDisabled: true,
                                    items: [
                                            Ext.create('Infor.grid.column.Button', {
                                                            tooltip: 'Lookup',
                                            getClass: function (value, meta, record) {
                                                if (!(record.isTable() || record.get('lookupCategory') === "IS_FIXED_LIST" || record.get('lookupCategory') === "IS_DYNAMIC_LIST" || record.get('lookupCategory') === "IS_PERIOD")) {// || record.get('lookupCategory') === "IS_DATE"  We dont support date lookup currently;
                                                    return 'x-hide-visibility';
                                                }
                                                return 'evolveQueryEditorLookup toolbar';
                                            },
                                            handler: function (view, rowIndex, colIndex, item, e, record, row) {
                                                if (record.isTable()) {
                                                    // Perform a table lookup ...
                                                    var lookupWindow = EvolveQueryEditor.view.TableTreeLookupWindow.Instance;
                                                    lookupWindow.viewFilters = me.down('#qnaGridFilters');
													lookupWindow.title = 'Table';

                                                    // It would appear that the record passed in is a clone from the store ...
                                                    // ... edit operations need to operate on the one in the store so find it
                                                    // ... and use that instead ...
                                                    lookupWindow.filterModelIndex = rowIndex;
                                                    lookupWindow.onLookupComplete = me.onTableLookupComplete;
                                                    lookupWindow.scope = me;
                                                    lookupWindow.show();
                                                }
                                                else {
                                                    // Perform a general lookup ...
                                                    var lookupWindow;
                                                    if (record.get('dataType') === 'time') {
                                                        lookupWindow = EvolveQueryEditor.view.PeriodLookupWindow.Instance;
                                                    } else {
                                                        lookupWindow = EvolveQueryEditor.view.BasicLookupWindow.Instance;
														lookupWindow.setTitle(record.get("name"));
                                                    }
                                                    lookupWindow.single = record.get('single');
                                                    lookupWindow.viewFilters = me.down('#qnaGridFilters');

                                                    // It would appear that the record passed in is a clone from the store ...
                                                    // ... edit operations need to operate on the one in the store so find it
                                                    // ... and use that instead ...
                                                    lookupWindow.filterModelIndex = rowIndex;
                                                    if (record.isSuperFieldFilter()) {
                                                        lookupWindow.onLookupComplete = me.onSuperfieldLookupComplete;
                                                    } else {
                                                        lookupWindow.onLookupComplete = undefined;
                                                    }
                                                    lookupWindow.scope = me;
                                                    lookupWindow.show();
                                                }
                                            },
                                            //icon: me.dialogContainer.getResourceUrl('Content/Lookup.png'),
                                            //iconCls: ''
                                        })
                                    ]
                                },
                                {
                                    xtype: 'inforactioncolumn',
                                    align: 'center',
                                    tdCls: 'evolveQueryGridActionColumnVerticalAlign',
                                    flex: 1,
                                    sortable: false,
                                    menuDisabled: true,
                                    items: [
                                            Ext.create('Infor.grid.column.Button', {
                                                tooltip: 'Filter options',
                                            handler: function (view, rowIndex, colIndex, item, e, record, row) {
                                                me.onPopupFilterOptionsWindowClick(record);
                                            },
                                            iconCls: 'evolveQueryEditorSettings toolbar'
                                        })
                                    ]
                                }
                            ],
                            plugins: [
                                Ext.create('Ext.grid.plugin.CellEditing', {

                                })
                            ]
                        },
                        /*
                        {
                            xtype: 'panel',
                            region: 'south',
                            border: false,
                            height: 41,
                            layout: {
                                type: 'absolute'
                            },
                            frameHeader: false,
                            header: false,
                            items: [
                                {
                                    xtype: 'button',
                                    id: 'qnaButtonAddFilter',
                                    x: 20,
                                    y: 10,
                                    text: '^',
                                    listeners: {
                                        click: {
                                            fn: me.AddFilter,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                        */
                    ]
                },
                {
                    xtype: 'panel',
                    region: 'center',
                    layout: {
                        align: 'stretch',
                        type: 'hbox'
                    },
                    id: 'qnaPanelOutput',
                    titleCollapse: true,
                    items: [
                        {
                            xtype: 'panel',
                            flex: 1,
                            border: false,
                            minWidth: 340,
                            layout: {
                                type: 'border'
                            },
                            bodyStyle: {
                                background: 'transparent'
                            },
                            frameHeader: false,
                            header: false,
                            items: [
                                {
                                    xtype: 'treepanel',
                                    flex: 1,
                                    region: 'center',
                                    lines: true,
                                    useArrows: true,
                                    dockedItems: [{
                                        flex: 1,
                                        dock: 'top',
                                        xtype: 'toolbar',
                                        cls: 'x-toolbar-content-connections',
                                        height: '36',
                                        items: [
                                        {
                                            xtype: 'label',
                                            text: 'Available columns',
                                            style: 'font-weight: bold'
                                        },
                                                { xtype: 'tbfill' },                                                
                                        {
                                            xtype: 'infor-button',
                                            ui: 'icon-button',
                                            tooltip: 'Add Filter',
                                            iconCls: 'contentConnectionsListButtonUp',
                                            disabled: true,
                                            id: 'qnaButtonAddFilter',
                                            listeners: {
                                                click: {
                                                    fn: me.AddFilter,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'infor-button',
                                            ui: 'icon-button',
                                            tooltip: 'Add Column',
                                            id: 'qnaButtonAddColumn',
                                            disabled: true,
                                            iconCls: 'evolveQueryEditorAddOutputColumn',
                                            listeners: {
                                                click: { fn: me.onAddOutputFieldButtonClicked, scope: me }
                                            }
                                        }
                                        ]
                                    }],
                                    rootVisible: false,
                                    itemId: 'fieldsTree',
                                    id: 'qnaTreeSelectionList',
                                    listeners: {
                                        beforeitemexpand: { fn: me.expandFieldsCheck, scope: me },
                                        itemdblclick: { fn: me.dblClickField, scope: me },
                                        selectionchange: { fn: me.fieldSelectionChanged, scope: me }
                                    },
                                    viewConfig: {

                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            border: false,
                            minWidth: 36,
                            width: 36,
                            layout: {
                                type: 'vbox',
								pack:'center',
								align:'center'
                            },
                            bodyStyle: {
                                background: 'transparent'
                            },
                            frameHeader: false,
                            header: false,
                            title: 'My Panel',
                            items: [
                                /*{
                                    xtype: 'button',
                                    width: 36,
                                    text: '>',
									listeners: {
										click: {fn: me.onAddOutputFieldButtonClicked,scope: me}		
                                	}
                            } */]
                        },
                        {
                            xtype: 'gridpanel',
                            flex: 1,
                            itemId: 'qnaGridFields',
                            id: 'qnaGridFields',
							forceFit: true,
							selModel:{mode:'MULTI'},
                            store: EvolveQueryEditor.model.Query.getOutputFieldsStore(),
                            dockedItems: [{
                                flex: 1,
                                dock: 'top',
                                xtype: 'toolbar',
                                cls: 'x-toolbar-content-connections',
                                items: [
								{
								    xtype: 'label',
								    text: 'Output',
                                    style: 'font-weight: bold'
								},
                                { xtype: 'tbfill' },
								{
								    xtype: 'infor-button',
								    ui: 'icon-button',
								    tooltip: 'Sort Options',
								    iconCls: 'evolveQueryEditorSortOptions',
								    handler : function(event, toolEl, panel) {
								        me.onPopupSortingWindowClick();
								    }
								},							
								{
								    xtype: 'infor-button',
								    ui: 'icon-button',
								    tooltip: Infor.Application.getLocalized('Delete'),
								    iconCls: 'contentConnectionsListButtonRemove',
								    handler : function(event, toolEl, panel) {										
								        me.onDeleteOutputfieldsClicked();
								    }
								}
                                ]
                            }],
                            viewConfig: {
                                listeners: {
                                    itemkeydown: {
                                        fn: me.onOutputRowKeyPress,
                                        scope: me
                                    },
                                    itemdblclick: {
                                        fn: me.onOutputRowDblClick,
                                        scope: me
                                    }
                                },
								
								plugins : {
									ptype : 'gridviewdragdrop',
									dragText : 'Reorder Output Fields'
						    	}
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'fieldName',
                                    text: 'Field',
									sortable: false,								   
								    menuDisabled: true
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'extractTypeDesc',
                                    text: 'Extraction Type',
									sortable: false,								   
								    menuDisabled: true
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'sortOptionDescription',
                                    text: 'Sort Order',
									sortable: false,								   
								    menuDisabled: true
                                },
                                {
                                    xtype: 'inforactioncolumn',
                                    align: 'center',
                                    tdCls: 'evolveQueryGridActionColumnVerticalAlign',
                                    flex: 1,
                                    sortable: false,
                                    menuDisabled: true,
                                    items: [
                                            Ext.create('Infor.grid.column.Button', {
                                                tooltip: 'Extraction options',
                                            handler: function (view, rowIndex, colIndex, item, e, record, row) {
                                                me.onOutputRowDblClick(view, record);
                                            },
                                            iconCls: 'evolveQueryEditorSettings toolbar'
                                        })
                                    ]
                                }
// 								,
// 								{
// 									menuDisabled: true,
// 									sortable: false,
// 									xtype: 'actioncolumn',
// 									hideMode: 'visibility',
// 									hidden: false,
// 									itemId: 'qaaButtonOutputfieldDelAction',
// 									items: [
// 									{
// 										handler: function (view, rowIndex, colIndex, item, e, record, row) {
// 											console.log("hello");
// 										},
// 										icon: me.dialogContainer.getResourceUrl('Content/ellipsis.png'),
// 										iconCls: ''
										
// 									}]
//             				}
							],
							listeners: {
// 								itemmouseenter: {
// 									fn: me.onGridpanelItemMouseEnter,
// 									scope: me
// 								},
// 								itemmouseleave: {
// 									fn: me.onGridpanelItemMouseLeave,
// 									scope: me
// 								}
							}
                            
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);

        //Must load the data to control after control has been inited, which means after calling 'me.callParent(arguments)'
        if (EvolveQueryEditor.model.Query.tableCode.length > 0) {
            me.loadFieldsTree();
        }

        this.dialogContainer.UX.hideLoadingMask();
    },
	
// 	onGridpanelItemMouseEnter: function(dataview, record, item, index, e, eOpts) {
// // 		var outputfieldActionBtn = this.down('#qaaButtonOutputfieldDelAction');
// // 		outputfieldActionBtn.show();
// 		var actionCell = item.cells[3];
// 		actionCell.hidden  = true;
//     },
	
// 	onGridpanelItemMouseLeave: function(dataview, record, item, index, e, eOpts) {
// 		var actionCell = item.cells[3];
// 		actionCell.hidden  = false;
// // 		var outputfieldActionBtn = this.down('#qaaButtonOutputfieldDelAction');
// // 		outputfieldActionBtn.hide();
//     },

    fieldSelectionChanged: function (model, record) {
        var disabled = !(record.length > 0 && record[0].get('leaf'));
        Ext.getCmp('qnaButtonAddFilter').setDisabled(disabled);
        Ext.getCmp('qnaButtonAddColumn').setDisabled(disabled);
    },

    AddFilter: function (button, e, eOpts) {
        var me = this;
        var sm = this.down('#fieldsTree').getSelectionModel();
        if (sm.hasSelection()) {
            var selectedField = sm.getSelection()[0].raw;
            if (!selectedField.leaf) {
                return;
            }
            var lastFilterWithSameCodePath;
            var lastFilterIndex;
            for (var i = 0; i < EvolveQueryEditor.model.Query.getFilterStore().count() ; i++) {
                var filter = EvolveQueryEditor.model.Query.getFilterStore().getAt(i);
                if (filter.get('codePath') === selectedField.codePath) {
                    lastFilterWithSameCodePath = filter;
                    lastFilterIndex = i;
                }
            };
            if (lastFilterWithSameCodePath && lastFilterWithSameCodePath.get('allowMultipleFilters') === false) {
                EvolveQueryEditor.util.QAAMsg.showErrorDialog('This field cannot be added as a filter multiple times.');
            } else {
                this.setLoading(true);
                Ext.Ajax.request({
                    url: EvolveQueryEditor.model.Query.serverUrlBase + '&method=BringOutFieldDetails',
                    jsonData: {
                        clientToken: EvolveQueryEditor.model.Query.clientToken,
                        codePath: selectedField.codePath,
                        query: {
                            productCode: EvolveQueryEditor.model.Query.getProductCode(),
                            tableCode: EvolveQueryEditor.model.Query.tableCode,
                            mode: EvolveQueryEditor.model.Query.getQueryType(),
                            filters: EvolveQueryEditor.model.Query.getFilters()
                        }
                    },
                    success: function (response) {
                        me.setLoading(false);
                        var filterData = Ext.decode(response.responseText);
                        var filter = {
                            name: filterData.name,
                            from: filterData.from,
                            to: filterData.to,
                            codePath: filterData.codePath,
                            //valueFrom: filterData.from,
                            //valueTo: filterData.to,
                            single: filterData.single,
                            dataType: filterData.dataType,
                            operator: EvolveQueryEditor.model.ComparisonOperatorModel.IS_NONE.get('value'),
                            caseInsensitive: false,
                            allowSegments: filterData.allowSegments,
                            segment: false,
                            segmentOffset: 1,
                            segmentLength: 5,
                            lookupCategory: filterData.lookupCategory,
                            allowMultipleFilters: filterData.allowMultipleFilters,
                            isOptionalFilter: true
                        }

                        if (lastFilterWithSameCodePath) {
                            filter.lookupStore = lastFilterWithSameCodePath.lookupStore;
                            filter.dataColumns = lastFilterWithSameCodePath.dataColumns;
                            EvolveQueryEditor.model.Query.getFilterStore().insert(lastFilterIndex + 1, filter);
                        } else {
                            EvolveQueryEditor.model.Query.getFilterStore().add(filter);
                        }

                    },
                    failure: function (response, options) {
                        me.setLoading(false);
                        EvolveQueryEditor.util.QAAMsg.showErrorDialog(response.statusText);
                    }
                });
            }
        }
    },
	
	removeOutputfileds:function(){
		var outputFieldGrid = me.down('#qnaGridFields');
		var sm = outputFieldGrid.getSelectionModel();
		
		if( !sm.hasSelection())
		{
			return;
		}
		
		var selections = sm.getSelection();
		var outputFieldStore = outputFieldGrid.store;
		
		
		//focus next item		
		var selectedIndex = Ext.Array.map(selections,function(si){
			return outputFieldStore.data.indexOf(si);
			});
			
		var maxIndex = Ext.Array.max(selectedIndex);
		var minIndex = Ext.Array.min(selectedIndex);
		
		
		var nextSelectedObj = null;
		if(maxIndex+1 <= outputFieldStore.data.length-1)
		{
			//focus next item
			nextSelectedObj = outputFieldStore.data.items[maxIndex+1];
			
		}
		else if( minIndex-1 >=0)
		{
			//foucs previous item
			nextSelectedObj = outputFieldStore.data.items[minIndex-1];
		}

		
		Ext.each(selections, function(item){	
			outputFieldStore.remove(item);
		});
		
		var outputFieldSortingStore = this._getOutputFieldSortingStore(outputFieldStore);
		this._setSortingToOutputFieldModel(outputFieldSortingStore);
		
		if(!Ext.isEmpty(nextSelectedObj))
		{
			sm.select(nextSelectedObj);
		}
		else if(outputFieldStore.data.items.length>0)
		{
			sm.select(outputFieldStore.data.items[0]);	
		}
	},
	
	_getOutputFieldSortingStore : function(outputFieldStore) {
		var outputFieldSortingStore = Ext.create('Ext.data.Store', {
                model: "EvolveQueryEditor.model.OutputFieldSortingModel",
		});
		if (outputFieldStore.getCount() === 0) {
			return outputFieldSortingStore;	
		}

		var nonSortedFields = outputFieldStore.queryBy(function(m, id) {return m.get('sortIndex') === 0});
		var sortedFields = outputFieldStore.queryBy(function(m, id) { return m.get('sortIndex') !== 0});
		sortedFields.sortBy(function(a, b) {return a.get('sortIndex') > b.get('sortIndex')});
		var allfields = sortedFields.getRange().concat(nonSortedFields.getRange());
		
        allfields.forEach(function(model) {
			var outputFieldSortingModel = EvolveQueryEditor.model.OutputFieldSortingModel.convertFromOuputFieldModel(model);
			outputFieldSortingStore.add(outputFieldSortingModel);
		});
		
		return outputFieldSortingStore;
	},

    onOutputRowKeyPress: function (view, record, item, index, key) {
        if (key.getKey() === Ext.EventObject.DELETE) {
            this.removeOutputfileds();
        }
    },
	
	onDeleteOutputfieldsClicked : function(){
		this.removeOutputfileds();		
	},

	removeOptionalFilters: function () {
	    var filterGrid = me.down('#qnaGridFilters');
	    var sm = filterGrid.getSelectionModel();

	    if (!sm.hasSelection()) {
	        return;
	    }

	    var selections = sm.getSelection();
	    var filterStore = filterGrid.store;

	    Ext.each(selections, function (item) {
	        if (item.isOptionalFilter() === true) {
	            filterStore.remove(item);
	        }
	    });
	},

	onFiltersKeyPress: function (view, record, item, index, key) {
	    if (key.getKey() === Ext.EventObject.DELETE) {
	        this.removeOptionalFilters();
	    }
	},

	onDeleteFiltersClicked: function () {
	    this.removeOptionalFilters();
	},
	
	_setSortingToOutputFieldModel : function(sortedStore) {
        var grid = this.down('#qnaGridFields');
		var outputFieldsStore = EvolveQueryEditor.model.Query.getOutputFieldsStore();
		
		var index = 0;
		sortedStore.each(function(sortingModel){
			var match = outputFieldsStore.findBy(function(record,id) {
				if(record.get('extractType') === sortingModel.get('extractType') && record.get('codePath') === sortingModel.get('codePath'))
					return true;
				});	
				
			if(match === -1) {
				//the outputField has been removed
				return; 
			}
			
			var matchedOutputField = outputFieldsStore.getAt(match);
			
			var sortingType = sortingModel.get('sortingType');
			if(sortingType === EvolveQueryEditor.model.SortingTypeModel.None){
				matchedOutputField.clearSorting();
			}
			else
			{
				matchedOutputField.setSorting(sortingType, ++index);
			}
		});
	},
	
    onSortingComplete: function (sortedStore, scope) {
		var me = scope;
		me._setSortingToOutputFieldModel(sortedStore);
    },

    onPopupSortingWindowClick: function () {
        var store = EvolveQueryEditor.model.Query.getOutputFieldsStore();
		if (store.getCount() == 0) {
			//TODO: popup a dialog or even disable the sorting button when there' no output field added yet
			return;
		}
		
		var outputFieldSortingStore = this._getOutputFieldSortingStore(store);
		
        var sortingWindow = Ext.create('EvolveQueryEditor.view.SortingWindow', {
            outputFieldsStore: outputFieldSortingStore,
            onLookupComplete: this.onSortingComplete,
            scope: this
        });

        sortingWindow.show();
    },

	onPopupFilterOptionsWindowClick : function (selectedFilter) {
		var filterOptionsModel = EvolveQueryEditor.model.FilterOptionsModel.createFromFilterModel(selectedFilter);
		
		var filterOptionsWindow = Ext.create('EvolveQueryEditor.view.FilterOptionsWindow', {
			filterOptionsModel: filterOptionsModel,
			scope: this
		});

        filterOptionsWindow.show();
	},
	
    onOutputRowDblClick: function (dataview, record, item, index, e, eOpts) {
        var extractTypeWindow = Ext.create("EvolveQueryEditor.view.ExtractionTypeWindow",
            {
                record: record,
                usedExtractTypes: this.getUsedExtractTypes(record.get("codePath"))
            });
			
			
		extractTypeWindow.onExtractionTypeWindowSetComplete = function(offset,offsetLength,reverseSign,factorValue,newExtractedType){
            EvolveQueryEditor.util.QAALogger.info("Extraction type window closed");			
			
        	record.set("segmentOffset", offset);        
        	record.set("segmentLength",offsetLength);        
        	record.set("reverseSign",reverseSign);       
        	record.set("scalingFactor",factorValue);      
       		record.set("extractType",newExtractedType);
            
			record.set("extractTypeDesc",""); //only for active the column to refresh
			
            dataview.refresh();
            };
        extractTypeWindow.show();
    },

    onSuperfieldLookupComplete: function (scope) {
        var me = scope;
        me.down('#qnaGridFilters').getView().refresh();

        me.clearExistedFiltersAndFields(function (filter) { return filter.isSuperFieldFilter() === false; }, true);

        me.addTableFilterIfPossible();
    },

    addTableFilterIfPossible: function(){
        var allSuperFieldsComplete = EvolveQueryEditor.model.Query.isAllSuperFieldFiltersSet();

        if (allSuperFieldsComplete) {
            // We can now add the table filter ...
            var modelTable = Ext.create('EvolveQueryEditor.model.FilterModel', {
                name: 'Table',
                codePath: 'TABLE'
            });

            EvolveQueryEditor.model.Query.getFilterStore().add(modelTable);

        }
    },

    clearExistedFiltersAndFields: function(condition, alsoClearTable){
        //Remove all existed filters.
        this.clearFilters(condition);

        //Clear selection list.
        this.clearFieldsTree();

        //Clear output fields.
        this.clearOutputFields();

        if (alsoClearTable === true) {
            EvolveQueryEditor.model.Query.clearTable();
        }
    },

    clearFilters: function(condition){
        var filters = [];
        var filterStore = EvolveQueryEditor.model.Query.getFilterStore();
        for (var i = 0; i < filterStore.count() ; i++) {
            var filter = filterStore.getAt(i);
            if (condition(filter)) {
                filters.push(filter);
            }
        }
        filterStore.remove(filters);
    },

    clearOutputFields: function(){
        EvolveQueryEditor.model.Query.getOutputFieldsStore().removeAll();
    },

    clearFieldsTree: function(){
        var treeFields = this.down('#fieldsTree');
        treeFields.setRootNode([]);
    },
    _getTreeLeafNodeImgCls:function(){
        return "evolveQueryTreeLeafNodeImg";
    },
    _getTreeNonLeafNodeImgCls:function(){
        return "evolveQueryTreeNonLeafNodeImg";
    },

    loadFieldsTree:function(){
        // Load Fields tree ... 
        // TODO should cache it for performance
        me = this;
        var treeFields = me.down('#fieldsTree');
        treeFields.setLoading(true, "Loading Fields hierarchy ...");
        Ext.Ajax.request({
            url: EvolveQueryEditor.model.Query.serverUrlBase + '&method=LookupOutputFields',
            jsonData: {
                clientToken: EvolveQueryEditor.model.Query.clientToken,
                query: {
                    productCode: EvolveQueryEditor.model.Query.getProductCode(),
                    tableCode: EvolveQueryEditor.model.Query.tableCode,
                    mode: EvolveQueryEditor.model.Query.getQueryType(),
                    filters: EvolveQueryEditor.model.Query.getFilters()
                }
            },
            success: function (response) {
                treeFields.setLoading(false);
                var data = Ext.decode(response.responseText);
						
				Ext.each(data.data.children, function(item){
					item.iconCls = item.leaf?me._getTreeLeafNodeImgCls():me._getTreeNonLeafNodeImgCls();
				});
				
                treeFields.setRootNode(data.data);
            },
            failure: function (response, options) {
                treeFields.setLoading(false);
                EvolveQueryEditor.util.QAAMsg.showErrorDialog(response.statusText);
            }
        });
    },

    onTableLookupComplete: function (scope) {
        var me = scope;
        var grid = me.down('#qnaGridFilters');
        grid.getView().refresh();

        me.clearExistedFiltersAndFields(function (filter) { return filter.isSuperFieldFilter() === false && filter.isTable() === false; });

        // Load Mandatory Fields ...
        EvolveQueryEditor.view.EvolveProgressDialog.SetProgressText('Retrieving mandatory fields ...');
        EvolveQueryEditor.view.EvolveProgressDialog.show();

        var storeTables = EvolveQueryEditor.model.Query.getMandatoryFiltersStore(function (records) {
            EvolveQueryEditor.view.EvolveProgressDialog.hide();

            for (var rowIndex = 0; rowIndex < records.length; rowIndex++) {
                if (records[rowIndex].get('from') == '') {
                    records[rowIndex].set('from', undefined);  // No default - so make it really no value
                }
                grid.store.add(records[rowIndex]);
            }
        });

        me.loadFieldsTree();

    },

    onComboboxSelect: function (combo, records, eOpts) {
        var rt = records[0];//.copy();
        this.down('#cbProducts').enable();
        var model = EvolveQueryEditor.model.Query;
        model.reportType = rt;

        //Clear output fields.
        this.clearOutputFields();
    },

    onCbProductsSelect: function (combo, records, eOpts) {
        var me = this;
        var rt = records[0];
        var model = EvolveQueryEditor.model.Query;
        model.product = rt;

        me.clearExistedFiltersAndFields(function (filter) { return true; }, true);

        // Load super filters ...
        var grid = this.down('#qnaGridFilters');
        EvolveQueryEditor.view.EvolveProgressDialog.SetProgressText('Retrieving superfields ...');
        EvolveQueryEditor.view.EvolveProgressDialog.show();

        var storeTables = EvolveQueryEditor.model.Query.getSuperFiltersStore(function (records) {
            EvolveQueryEditor.view.EvolveProgressDialog.hide();

            for (var rowIndex = 0; rowIndex < records.length; rowIndex++) {
                if (records[rowIndex].get('from') == '') {
                    records[rowIndex].set('from', undefined);  // No default - so make it really no value
                }
                records[rowIndex].set('superFieldFilter', true);
                grid.store.add(records[rowIndex]);
            }

            me.addTableFilterIfPossible();

        });
    },

    getUsedExtractTypes: function (codepath) {
        var usedExtractTypes = [];

        var outputStore = EvolveQueryEditor.model.Query.getOutputFieldsStore();
        Ext.Array.forEach(outputStore.data.items, function (item, index, allItems) {

            if (codepath === item.get("codePath")) {
                usedExtractTypes.push(item.get("extractType"));
            }

        });

        return usedExtractTypes;
    },
	
	addOutputField:function(record){
		
		if(Ext.isEmpty(record)) 
		{
			EvolveQueryEditor.util.QAALogger.info("You must select an output column first");
			return;
		}

		if (!record.get('leaf')) {
		    return;
		}
		var usedExtractTypes = this.getUsedExtractTypes(record.raw.codePath);

        var reportType = EvolveQueryEditor.model.Query.reportType;
        var dataType = EvolveQueryEditor.model.FieldDataTypeModel.find(record.raw.datatype);
        var isFixedLookup = record.raw.lookupCategory === "IS_FIXED_LIST";
        var allExtrationTypes = EvolveQueryEditor.model.ExtractionTypeModel.getAvaliableExtractTypes(isFixedLookup, dataType, reportType, usedExtractTypes);
        
        if (allExtrationTypes.length === 0) {
            EvolveQueryEditor.util.QAAMsg.showInfoDialog("This output field cannot be added again as all extraction types for it have already been added.");
            return;
        }
        
        var nextAvaliableExtractType = allExtrationTypes[0];

        var newOutputField = Ext.create('EvolveQueryEditor.model.OutputFieldModel', {
            codePath: record.raw.codePath,
            dataType: dataType,
            fieldVarType: record.raw.fieldVartype,
            segmentOffset: 1,
            segmentLength: 1,
            scalingFactor: "",
            reverseSign: false,
            extractType: nextAvaliableExtractType,
            fieldName: record.raw.text,
            lookupCategory: record.raw.lookupCategory
        });

        EvolveQueryEditor.model.Query.getOutputFieldsStore().add(newOutputField);
	},
	
	onAddOutputFieldButtonClicked:function(button, e, eOpts){
		var sm = this.down("#fieldsTree").getSelectionModel();
		
		var selections = sm.getSelection();
		
		var record = selections[0];
		this.addOutputField(record);
	},	
	

    dblClickField: function (view, record, item, index, e, eOpts) {
		this.addOutputField(record);        
    },

    expandFieldsCheck: function (node, eOpts) {
		var me = this;
        if ((node.raw.childrenFetched != undefined) && (node.raw.childrenFetched == false)) {
            var treeFields = eOpts.scope.down('#fieldsTree');
            treeFields.setLoading(true, "Loading Fields hierarchy ...");
            Ext.Ajax.request({
                url: EvolveQueryEditor.model.Query.serverUrlBase + '&method=LookupOutputFields',
                jsonData: {
                    clientToken: EvolveQueryEditor.model.Query.clientToken,
                    codePath: node.raw.codePath,
                    query: {
                        productCode: EvolveQueryEditor.model.Query.getProductCode(),
                        tableCode: EvolveQueryEditor.model.Query.tableCode,
                        mode: EvolveQueryEditor.model.Query.getQueryType(),
                        filters: EvolveQueryEditor.model.Query.getFilters()
                    }
                },
                success: function (response) {
                    treeFields.setLoading(false);

                    // Remove anything currently there - including the placeholder ...
                    node.removeAll();

                    var data = Ext.decode(response.responseText);
                    for (var index = 0; index < data.data.children.length; index++) {
                        var child = data.data.children[index];

                        /*
                        var newNode = Ext.create('Ext.data.TreeModel', {
                            leaf: child.leaf,
                            loaded: false,
                            expandable: (child.leaf == false),
                            text: child.text,
                            childrenFetched: (child.leaf == false) ? child.childrenFetched : true,
                            codePath:child.codePath,
                            datatype:child.datatype,
                            lookupCategory:child.lookupCategory,
                            fieldVartype: child.fieldVartype
                        });
                        */
                        //node.appendChild([newNode], true);
                        var newTreeNode = node.appendChild(
                            {
                                text: child.text, leaf: child.leaf, codePath: child.codePath,
                                loaded: (child.leaf == false) ? false : true,
                                expandable: (child.leaf == false),
                                text: child.text,
                                icon: child.icon,
								iconCls:child.leaf?me._getTreeLeafNodeImgCls():me._getTreeNonLeafNodeImgCls(),
                                childrenFetched: (child.leaf == false) ? child.childrenFetched : true,
                                datatype: child.datatype,
                                lookupCategory: child.lookupCategory,
                                fieldVartype: child.fieldVartype,
                                children: (child.leaf == false) ? [{ text: ' ' }] : undefined
                            }, true);

                        if (child.leaf == false) {
                            newTreeNode.leaf = child.leaf;
                            newTreeNode.loaded = (child.leaf == false) ? false : true;
                            newTreeNode.expandable = (child.leaf == false);
                            newTreeNode.childrenFetched = (child.leaf == false) ? child.childrenFetched : true;
                            newTreeNode.codePath = child.codePath;
                            newTreeNode.icon = child.icon;
                            newTreeNode.appendChild({ text: ' ' });
                        }
                        /*
                        if ((newNode.raw.childrenFetched != undefined) && (newNode.raw.childrenFetched == false)) {
                            newNode.expandable = true;
                            newNode.leaf = false;

                        }*/
                    }
                    node.raw.childrenFetched = true;
                    node.expand();
                },
                failure: function (response, options) {
                    treeFields.setLoading(false);
                    EvolveQueryEditor.util.QAAMsg.showErrorDialog(response.statusText);
                }
            });

            return false;
        }
    },

    setQueryDefinition: function (queryDefinition) {
        try{
            if (queryDefinition !== undefined && queryDefinition.length > 0) {
                var matches = queryDefinition.match(/<Formula>(.+)<\/Formula>/);
                if (matches.length === 2) {
                    return EvolveQueryEditor.model.Query.queryFromFormula(EvolveQueryEditor.util.HtmlUtils.convertPlaceHolderToAngleBracket(matches[1]));
                } else {
                    EvolveQueryEditor.util.QAALogger.error(Ext.String.format("The given query definition is not correct: {0}", queryDefinition));
                    return false;
                }
            }
        } catch (err) {
            EvolveQueryEditor.util.QAALogger.error(Ext.String.format("The given query definition is not correct: {0}. The error is: {1}", queryDefinition, err.message));
            return false;
        }
    },

	_validateQueryDefinition : function() {
		if(Ext.isEmpty(EvolveQueryEditor.model.Query.reportType.toFormula())) {
			var errorMessage = EvolveQueryEditor.util.UX.getLocalized('reportType is empty');
			EvolveQueryEditor.util.QAAMsg.showErrorDialog(errorMessage);
			return false;
		}
		
		if(EvolveQueryEditor.model.Query.isProductCodeEmpty()) {
			var errorMessage = EvolveQueryEditor.util.UX.getLocalized('productCode is empty');
			EvolveQueryEditor.util.QAAMsg.showErrorDialog(errorMessage);
			return false;
		} 
		
		if(EvolveQueryEditor.model.Query.isTableCodeEmpty()) {
			var errorMessage = EvolveQueryEditor.util.UX.getLocalized('tableCode is empty');
			EvolveQueryEditor.util.QAAMsg.showErrorDialog(errorMessage);
			return false;
		} 
		
		if(EvolveQueryEditor.model.Query.isFilterCountAsZero()) {
			var errorMessage = EvolveQueryEditor.util.UX.getLocalized('filters count is 0');
			EvolveQueryEditor.util.QAAMsg.showErrorDialog(errorMessage);
			return false;
		}
		
		var result = EvolveQueryEditor.model.Query.isFilterFromEmpty();
		if (result.isEmpty) {
			var errorMessage = EvolveQueryEditor.util.UX.getLocalized('value is empty');
			EvolveQueryEditor.util.QAAMsg.showErrorDialog(result.name + errorMessage);
			return false;
		}
		
		if (EvolveQueryEditor.model.Query.isOutputFieldCountAsZero()){
			var errorMessage = EvolveQueryEditor.util.UX.getLocalized('outputFields count is 0');
			EvolveQueryEditor.util.QAAMsg.showErrorDialog(errorMessage);
			return false;
		}
		
		return true;
	},

    getQueryDefinition: function () {
		if(!this._validateQueryDefinition()) {
			return undefined;	
		}
		
		var reportTypeFormula = EvolveQueryEditor.model.Query.reportType.toFormula();
		var queryFormula = EvolveQueryEditor.model.Query.queryToFormula();
		var formulaTemplate = "<?xml version=\"1.0\"?><PersistentEvolveQuery xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">  <Bindings />  <Formula>={0}(\"{1}\",)</Formula></PersistentEvolveQuery>";
        return Ext.String.format(formulaTemplate, EvolveQueryEditor.util.HtmlUtils.convertAngleBracketToPlaceHolder(reportTypeFormula), EvolveQueryEditor.util.HtmlUtils.convertAngleBracketToPlaceHolder(queryFormula));
    }
});