/*
 * File: app/view/EditorControl.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('EvolveQueryEditor.model.FieldTreeModel', {
    extend: 'Ext.data.TreeModel',
    requires: [
        'Ext.data.NodeInterface'
    ]
},
function () {
    Ext.data.NodeInterface.decorate(this);
});

Ext.define('EvolveQueryEditor.view.EditorControl', {
    extend: 'Ext.panel.Panel',

    requires: [
        'EvolveQueryEditor.model.FieldDataTypeModel',
        'EvolveQueryEditor.model.ExtractionTypeModel',
        'EvolveQueryEditor.model.ScalingFactorModel',
        'EvolveQueryEditor.model.SortingTypeModel',
        'EvolveQueryEditor.model.FilterModel',
        'EvolveQueryEditor.model.Query',
        'EvolveQueryEditor.model.OutputFieldModel',
		'EvolveQueryEditor.model.OutputFieldSortingModel',
        
        'EvolveQueryEditor.store.ScalingFactorStore',
        'EvolveQueryEditor.store.ProductStore',
        'EvolveQueryEditor.store.SuperFieldsStore',
        'EvolveQueryEditor.store.ReportTypeStore',
        'EvolveQueryEditor.store.SortingTypeStore',
        'EvolveQueryEditor.store.MandatoryFieldsStore',
        'EvolveQueryEditor.store.BasicLookupStore',
        'EvolveQueryEditor.store.QueryContextStore',

        'EvolveQueryEditor.view.BasicLookupWindow',
        'EvolveQueryEditor.view.TableTreeLookupWindow',
        'EvolveQueryEditor.view.EvolveProgressDialog',
        "EvolveQueryEditor.view.ExtractionTypeWindow",
		'EvolveQueryEditor.view.SortingWindow'
    ],

    title: 'Q&A Query Editor',
    header: false,
    layout: 'border',
    width: 717,
    height: 555,

    /**
     * @cfg {Infor.BI.dashboards.IDialogContainer} dialogContainer Reference to object providing dashboard functionality. (required)
     */
    dialogContainer: undefined,

    initComponent: function () {
        var me = this;

        var proxyUrl = me.dialogContainer.getActionUrl('EvolveProxy', 'Index', { aliasName: me.dialogConfig.aliasName }),
                    loginUrl = me.dialogContainer.getActionUrl('EvolveProxy', 'Login', { aliasName: me.dialogConfig.aliasName, connectionInfo: me.dialogConfig.connectionInfo });

        if (EvolveQueryEditor.model.Query.clientToken == undefined) {
            EvolveQueryEditor.view.EvolveProgressDialog.SetProgressText('Logging into Evolve Server ...');
            EvolveQueryEditor.view.EvolveProgressDialog.show();

            Ext.Ajax.request({
                url: loginUrl,
                timeout: 60000,
                async: false, 
                success: function (result, options) {
                    EvolveQueryEditor.view.EvolveProgressDialog.hide();
                    var res = Ext.decode(result.responseText);
                    var model = EvolveQueryEditor.model.Query;
                    model.clientToken = res.data.ClientToken;
                    model.serverUrlBase = proxyUrl;


                },
                failure: function (result, options) {
                    EvolveQueryEditor.view.EvolveProgressDialog.hide();
                    alert(result.statusText);
                }
            });

        }

        me.setQueryDefinition(me.dialogConfig.query);
        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    region: 'north',
                    split: true,
                    height: 250,
                    layout: {
                        type: 'border'
                    },
                    collapsible: true,
                    title: 'Filters',
                    titleCollapse: true,
                    itemId: 'qnaFiltersPanel',
                    items: [
                        {
                            xtype: 'panel',
                            region: 'north',
                            height: 98,
                            layout: {
                                type: 'border'
                            },
                            header: false,
                            title: 'My Panel',
                            items: [
                                {
                                    xtype: 'fieldcontainer',
                                    region: 'west',
                                    margin: '0 0 0 20',
                                    width: 358,
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            tpl: '<tpl for="."><div class="x-boundlist-item"><span style="display: inline-block; height: 50px;line-height: 50px;vertical-align: middle"><img style="vertical-align: middle" src="{TypeImage}"/>&nbsp;&nbsp;{Caption}</span></div></tpl>',
                                            itemId: 'cbQueryTypes',
                                            width: 301,
                                            fieldLabel: 'Report Type',
                                            editable: false,
                                            displayField: 'Caption',
                                            queryMode: 'local',
                                            store: EvolveQueryEditor.store.ReportTypeStore.create(me.dialogContainer),
                                            valueField: 'Type',
                                            value: EvolveQueryEditor.model.Query.getQueryType(),
                                            listeners: {
                                                select: {
                                                    fn: me.onComboboxSelect,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'combobox',
                                            tpl: '<tpl for="."><div class="x-boundlist-item"><span style="display: inline-block; height: 26px;line-height: 26px;vertical-align: middle"><img style="vertical-align: middle" src="{IconUrl}"/>&nbsp;&nbsp;{Description}</span></div></tpl>',
                                            disabled: EvolveQueryEditor.model.Query.getQueryType() === undefined,
                                            itemId: 'cbProducts',
                                            width: 301,
                                            fieldLabel: 'Product',
                                            editable: false,
                                            displayField: 'Description',
                                            store: Ext.create('EvolveQueryEditor.store.ProductStore'),
                                            valueField: 'Code',
                                            value: EvolveQueryEditor.model.Query.getProductCode(),
                                            listeners: {
                                                select: {
                                                    fn: me.onCbProductsSelect,
                                                    scope: me
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'label',
                                    margins: '10 10 10 10',
                                    region: 'center',
                                    text: 'Here would be some general help text for the user so that they know what they have got to do next - e.g. "Please select the Product"'
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            region: 'center',
                            itemId: 'gridFilters',
                            header: false,
                            title: 'My Grid Panel',
                            store: EvolveQueryEditor.model.Query.getFilterStore(),
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'name',
                                    text: 'Filter Name',
                                    flex: 15
                                },
                                {
                                    xtype: 'actioncolumn',
                                    flex: 2,
                                    items: [
                                        {
                                            handler: function (view, rowIndex, colIndex, item, e, record, row) {
                                                var filterType = record.get('codePath');
                                                if (filterType == 'TABLE') {
                                                    // Perform a table lookup ...
                                                    var lookupWindow = EvolveQueryEditor.view.TableTreeLookupWindow.create();
                                                    lookupWindow.scope = me;
                                                    lookupWindow.record = record;
                                                    lookupWindow.onLookupComplete = me.onTableLookupComplete;
                                                    lookupWindow.show();
                                                }
                                                else {
                                                    // Perform a general lookup ...
                                                    var lookupWindow = EvolveQueryEditor.view.BasicLookupWindow.create();
                                                    lookupWindow.viewFilters = me.down('#gridFilters');

                                                    // It would appear that the record passed in is a clone from the store ...
                                                    // ... edit operations need to operate on the one in the store so find it
                                                    // ... and use that instead ...
                                                    var storeRecordIndex = lookupWindow.viewFilters.store.findExact('codePath', record.get('codePath'));
                                                    lookupWindow.filterModelIndex = storeRecordIndex;
                                                    if (record.get('superFieldFilter') === true) {
                                                        lookupWindow.onLookupComplete = me.onSuperfieldLookupComplete;
                                                    }
                                                    lookupWindow.scope = me;
                                                    lookupWindow.show();
                                                }
                                            },
                                            icon: me.dialogContainer.getResourceUrl('Content/ellipsis.png'),
                                            iconCls: ''
                                        }
                                    ]
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'from',
                                    text: 'Filter Value From',
                                    flex: 25
                                },
                                {
                                    xtype: 'actioncolumn',
                                    flex: 1,
                                    items: [
                                        {

                                        }
                                    ]
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'to',
                                    text: 'Filter Value To',
                                    flex: 25
                                },
                                {
                                    xtype: 'actioncolumn',
                                    flex: 1,
                                    items: [
                                        {

                                        }
                                    ]
                                }
                            ],
                            plugins: [
                                Ext.create('Ext.grid.plugin.CellEditing', {

                                })
                            ]
                        }
                    ]
                },
                {
                    xtype: 'panel',
                    region: 'center',
                    layout: {
                        align: 'stretch',
                        type: 'hbox'
                    },
                    title: 'Output',
                    titleCollapse: true,
                    items: [
                        {
                            xtype: 'panel',
                            flex: 1,
                            border: false,
                            minWidth: 340,
                            layout: {
                                type: 'border'
                            },
                            bodyStyle: {
                                background: 'transparent'
                            },
                            frameHeader: false,
                            header: false,
                            title: 'My Panel',
                            items: [
                                {
                                    xtype: 'panel',
                                    region: 'north',
                                    border: false,
                                    height: 41,
                                    layout: {
                                        type: 'absolute'
                                    },
                                    frameHeader: false,
                                    header: false,
                                    title: 'My Panel',
                                    items: [
                                        {
                                            xtype: 'button',
                                            x: 20,
                                            y: 10,
                                            text: 'Add Filter'
                                        },
                                        {
                                            xtype: 'textfield',
                                            x: 120,
                                            y: 10,
                                            fieldLabel: 'Find',
                                            labelWidth: 50
                                        }
                                    ]
                                },
                                {
                                    xtype: 'treepanel',
                                    flex: 1,
                                    margins: '0 10 10 10',
                                    region: 'center',
                                    title: 'Selection List',
                                    lines: true,
                                    useArrows: true,
                                    rootVisible: false,
                                    itemId: 'fieldsTree',
                                    listeners: {
                                        beforeitemexpand: { fn: me.expandFieldsCheck, scope: me },
                                        itemdblclick: { fn: me.dblClickField, scope: me }
                                    },
                                    viewConfig: {

                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'panel',
                            border: false,
                            minWidth: 36,
                            width: 36,
                            layout: {
                                type: 'absolute'
                            },
                            bodyStyle: {
                                background: 'transparent'
                            },
                            frameHeader: false,
                            header: false,
                            title: 'My Panel',
                            items: [
                                {
                                    xtype: 'button',
                                    x: 0,
                                    y: 40,
                                    width: 36,
                                    text: '>'
                                },
                                {
                                    xtype: 'button',
                                    x: 0,
                                    y: 70,
                                    width: 36,
                                    text: '>>'
                                },
                                {
                                    xtype: 'button',
                                    x: 0,
                                    y: 170,
                                    margin: '0, 50, 0, 0',
                                    width: 36,
                                    text: '<'
                                },
                                {
                                    xtype: 'button',
                                    x: 0,
                                    y: 200,
                                    width: 36,
                                    text: '<<'
                                }
                            ]
                        },
                        {
//                             xtype: 'panel',
//                             layout: {
//                                 type: 'vbox'
//                             },
//                             margin: 10,
//                             frameHeader: false,
//                             header: false,
//                             items: [{
//                                 xtype: 'button',
//                                 text: 'Sort',
//                                 id: 'qnaButtonSort',
//                                 listeners:
// 							    {
// 							        click:
// 								    {
// 								        fn: me.onPopupSortingWindowClick,
// 								        scope: me
// 								    }
// 							    }
//                             }, {
                            xtype: 'gridpanel',
                            flex: 1,
                            margin: 10,
                            title: 'Output Columns',
                            itemId: 'qnaGridFields',
                            store: EvolveQueryEditor.model.Query.getOutputFieldsStore(),
							tools: [{
								type: 'gear',
								tooltip: 'Sort',
								handler : function(event, toolEl, panel) {
									me.onPopupSortingWindowClick();
								}
							}],
                            viewConfig: {
                                listeners: {
                                    itemkeydown: {
                                        fn: me.onOutputRowKeyPress,
                                        scope: me
                                    },
                                    itemdblclick: {
                                        fn: me.onOutputRowDblClick,
                                        scope: me
                                    }
                                }
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'fieldName',
                                    text: 'Field'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'extractTypeDesc',
                                    text: 'Extraction Type'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'sortOptionDescription',
                                    text: 'Sort Order'
                                }
                            ]
//                            }]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);

        //Must load the data to control after control has been inited, which means after calling 'me.callParent(arguments)'
        if (EvolveQueryEditor.model.Query.tableCode.length > 0) {
            me.loadFieldsTree();
        }
        
    },

    onOutputRowKeyPress: function (view, record, item, index, key) {
        if (key.getKey() === Ext.EventObject.DELETE) {
            var store = view.getStore();
            var sm = view.getSelectionModel();
            if (sm.hasSelection()) {
                store.remove(sm.getSelection());
            }
        }
    },

    onSortingComplete: function (sortedStore, scope) {
        var me = scope;
        var grid = me.down('#qnaGridFields');
		var outputFieldsStore = EvolveQueryEditor.model.Query.getOutputFieldsStore();
		
		var index = 0;
		sortedStore.each(function(sortingModel){
			var match = outputFieldsStore.findBy(function(record,id) {
				if(record.get('extractType') == sortingModel.get('extractType') && record.get('codePath') == sortingModel.get('codePath'))
					return true;
				});	
				
			if(match == -1) {
				EvolveQueryEditor.util.QAALogger.error('The outputFields Store is not integrated');			
				return;
			}
			
			if(sortingModel.get('sortingType') == EvolveQueryEditor.model.SortingTypeModel.None.get('sortingType')){
				outputFieldsStore.getAt(match).set('sortIndex', 0);
			}
			else
			{
				outputFieldsStore.getAt(match).set('sortIndex', ++index);
			}
			
			outputFieldsStore.getAt(match).set('sortingType', EvolveQueryEditor.store.SortingTypeStore.Instance.findRecord('sortingType',sortingModel.get('sortingType')));
			outputFieldsStore.getAt(match).set('sortOptionDescription', '');  // enforce to refresh this field 
		});
       
        grid.getView().refresh();
    },

    onPopupSortingWindowClick: function () {
		//convert each OutputFieldModel in the store to a OutputFieldSortingModel
        //then create a store using these OutputFieldSortingModel objects
        //pass this store to sortingWindow for manipulation
        var store = EvolveQueryEditor.model.Query.getOutputFieldsStore();
		if (store.getCount() == 0) return;
		
		//TODO: this logic maybe move into proxy 
		var outputFieldSortingModelList = [];
        store.each(function(model) {
			var outputFieldSortingModel = EvolveQueryEditor.model.OutputFieldSortingModel.convertFromOuputFieldModel(model);
			outputFieldSortingModelList.push(outputFieldSortingModel);
		});
		
		var outputFieldSortingStore = Ext.create('Ext.data.Store', {
                model: "EvolveQueryEditor.model.OutputFieldSortingModel",
				data: outputFieldSortingModelList,
                proxy: {
                    type: 'memory',
                    reader: {
                        type: 'json',
                        root: 'items'
                    }
                },
				sorters:[{
					property:'sortIndex',
					direction: 'ASC'
				}]
		});
		
        var sortingWindow = Ext.create('EvolveQueryEditor.view.SortingWindow', {
            outputFieldsStore: outputFieldSortingStore,
            onLookupComplete: this.onSortingComplete,
            scope: this
        });

        sortingWindow.show();
    },

    onOutputRowDblClick: function (dataview, record, item, index, e, eOpts) {
        var extractTypeWindow = Ext.create("EvolveQueryEditor.view.ExtractionTypeWindow",
            {
                record: record,
                usedExtractTypes: this.getUsedExtractTypes(record.get("codePath"))
            });
			
			
		extractTypeWindow.scope = me;
		extractTypeWindow.onExtractionTypeWindowSetComplete = function(offset,offsetLength,reverseSign,factorValue,newExtractedType){
            EvolveQueryEditor.util.QAALogger.info("Extration type window closed");			
			
        	record.set("segmentOffset", offset);        
        	record.set("segmentLength",offsetLength);        
        	record.set("reverseSign",reverseSign);       
        	record.set("scalingFactor",factorValue);      
       		record.set("extractType",newExtractedType);
            
			record.set("extractTypeDesc",""); //only for active the column to refresh
			
            dataview.refresh();
            };
        extractTypeWindow.show();
    },

    onSuperfieldLookupComplete: function (scope) {
        var me = scope;
        me.down('#gridFilters').getView().refresh();

        var allSuperFieldsComplete = true;

        // TODO: Check that all superfields are filled in ...

        if (allSuperFieldsComplete) {
            // We can now add the table filter ...
            var modelTable = Ext.create('EvolveQueryEditor.model.FilterModel', {
                name: 'Table',
                codePath: 'TABLE'
            });

            var grid = me.down('#gridFilters');
            grid.store.add(modelTable);
        }
    },

    loadFieldsTree:function(){
        // Load Fields tree ... 
        // TODO should cache it for performance
        me = this;
        var treeFields = me.down('#fieldsTree');
        treeFields.setLoading(true, "Loading Fields hierarchy ...");
        Ext.Ajax.request({
            url: EvolveQueryEditor.model.Query.serverUrlBase + '&method=LookupOutputFields',
            jsonData: {
                clientToken: EvolveQueryEditor.model.Query.clientToken,
                query: {
                    productCode: EvolveQueryEditor.model.Query.getProductCode(),
                    tableCode: EvolveQueryEditor.model.Query.tableCode,
                    mode: EvolveQueryEditor.model.Query.getQueryType(),
                    filters: EvolveQueryEditor.model.Query.getFilters()
                }
            },
            success: function (response) {
                treeFields.setLoading(false);
                var data = Ext.decode(response.responseText);
                treeFields.setRootNode(data.data);
            },
            failure: function (response, options) {
                treeFields.setLoading(false);
                alert(response.statusText);
            }
        });
    },

    onTableLookupComplete: function (scope) {
        var me = scope;
        var grid = me.down('#gridFilters');
        grid.getView().refresh();

        // Load Mandatory Fields ...
        EvolveQueryEditor.view.EvolveProgressDialog.SetProgressText('Retrieving mandatory fields ...');
        EvolveQueryEditor.view.EvolveProgressDialog.show();

        var storeTables = EvolveQueryEditor.model.Query.getMandatoryFiltersStore(function (records) {
            EvolveQueryEditor.view.EvolveProgressDialog.hide();

            for (var rowIndex = 0; rowIndex < records.length; rowIndex++) {
                if (records[rowIndex].get('from') == '') {
                    records[rowIndex].set('from', undefined);  // No default - so make it really no value
                }
                grid.store.add(records[rowIndex]);
            }
        });

        me.loadFieldsTree();

    },

    onComboboxSelect: function (combo, records, eOpts) {
        var rt = records[0];//.copy();
        this.down('#cbProducts').enable();
        var model = EvolveQueryEditor.model.Query;
        model.reportType = rt;
    },

    onCbProductsSelect: function (combo, records, eOpts) {
        var rt = records[0];
        var model = EvolveQueryEditor.model.Query;
        model.product = rt;

        // Load super filters ...
        var grid = this.down('#gridFilters');
        EvolveQueryEditor.view.EvolveProgressDialog.SetProgressText('Retrieving superfields ...');
        EvolveQueryEditor.view.EvolveProgressDialog.show();

        var storeTables = EvolveQueryEditor.model.Query.getSuperFiltersStore(function (records) {
            EvolveQueryEditor.view.EvolveProgressDialog.hide();

            grid.store.removeAll();
            for (var rowIndex = 0; rowIndex < records.length; rowIndex++) {
                if (records[rowIndex].get('from') == '') {
                    records[rowIndex].set('from', undefined);  // No default - so make it really no value
                }
                records[rowIndex].set('superFieldFilter', true);
                grid.store.add(records[rowIndex]);
            }
        });
    },

    getUsedExtractTypes: function (codepath) {
        var usedExtractTypes = [];

        var outputStore = EvolveQueryEditor.model.Query.getOutputFieldsStore();
        Ext.Array.forEach(outputStore.data.items, function (item, index, allItems) {

            if (codepath === item.get("codePath")) {
                usedExtractTypes.push(item.get("extractType"));
            }

        });

        return usedExtractTypes;
    },

    dblClickField: function (view, record, item, index, e, eOpts) {

        var usedExtractTypes = this.getUsedExtractTypes(record.raw.codePath);

        var reportType = EvolveQueryEditor.model.Query.reportType;
        var dataType = EvolveQueryEditor.model.FieldDataTypeModel.find(record.raw.datatype);
        var isFixedLookup = record.raw.lookupCategory === "IS_FIXED_LIST";
        var allExtrationTypes = EvolveQueryEditor.model.ExtractionTypeModel.getAvaliableExtractTypes(isFixedLookup, dataType, reportType, usedExtractTypes);
        
        if (allExtrationTypes.length === 0) {
            alert("cant add more outputfield");
            return;
        }
        
        var nextAvaliableExtractType = allExtrationTypes[0];

        var newOutputField = Ext.create('EvolveQueryEditor.model.OutputFieldModel', {
            codePath: record.raw.codePath,
            dataType: dataType,
            fieldVarType: record.raw.fieldVartype,
            segmentOffset: 1,
            segmentLength: 1,
            scalingFactor: "",
            reverseSign: false,
            extractType: nextAvaliableExtractType,
            fieldName: record.raw.text,
            lookupCategory: record.raw.lookupCategory,
            sortingType: EvolveQueryEditor.model.SortingTypeModel.Ascending, 
            sortIndex: 0 //by default ascending but no sort index            
        });

        EvolveQueryEditor.model.Query.getOutputFieldsStore().add(newOutputField);
    },

    expandFieldsCheck: function (node, eOpts) {
        if ((node.raw.childrenFetched != undefined) && (node.raw.childrenFetched == false)) {
            var treeFields = eOpts.scope.down('#fieldsTree');
            treeFields.setLoading(true, "Loading Fields hierarchy ...");
            Ext.Ajax.request({
                url: EvolveQueryEditor.model.Query.serverUrlBase + '&method=LookupOutputFields',
                jsonData: {
                    clientToken: EvolveQueryEditor.model.Query.clientToken,
                    codePath: node.raw.codePath,
                    query: {
                        productCode: EvolveQueryEditor.model.Query.getProductCode(),
                        tableCode: EvolveQueryEditor.model.Query.tableCode,
                        mode: EvolveQueryEditor.model.Query.getQueryType(),
                        filters: EvolveQueryEditor.model.Query.getFilters()
                    }
                },
                success: function (response) {
                    treeFields.setLoading(false);

                    // Remove anything currently there - including the placeholder ...
                    node.removeAll();

                    var data = Ext.decode(response.responseText);
                    for (var index = 0; index < data.data.children.length; index++) {
                        var child = data.data.children[index];

                        /*
                        var newNode = Ext.create('Ext.data.TreeModel', {
                            leaf: child.leaf,
                            loaded: false,
                            expandable: (child.leaf == false),
                            text: child.text,
                            childrenFetched: (child.leaf == false) ? child.childrenFetched : true,
                            codePath:child.codePath,
                            datatype:child.datatype,
                            lookupCategory:child.lookupCategory,
                            fieldVartype: child.fieldVartype
                        });
                        */
                        //node.appendChild([newNode], true);
                        var newTreeNode = node.appendChild(
                            {
                                text: child.text, leaf: child.leaf, codePath: child.codePath,
                                loaded: (child.leaf == false) ? false : true,
                                expandable: (child.leaf == false),
                                text: child.text,
                                icon: child.icon,
                                childrenFetched: (child.leaf == false) ? child.childrenFetched : true,
                                datatype: child.datatype,
                                lookupCategory: child.lookupCategory,
                                fieldVartype: child.fieldVartype,
                                children: (child.leaf == false) ? [{ text: ' ' }] : undefined
                            }, true);

                        if (child.leaf == false) {
                            newTreeNode.leaf = child.leaf;
                            newTreeNode.loaded = (child.leaf == false) ? false : true;
                            newTreeNode.expandable = (child.leaf == false);
                            newTreeNode.childrenFetched = (child.leaf == false) ? child.childrenFetched : true;
                            newTreeNode.codePath = child.codePath;
                            newTreeNode.icon = child.icon;
                            newTreeNode.appendChild({ text: ' ' });
                        }
                        /*
                        if ((newNode.raw.childrenFetched != undefined) && (newNode.raw.childrenFetched == false)) {
                            newNode.expandable = true;
                            newNode.leaf = false;

                        }*/
                    }
                    node.raw.childrenFetched = true;
                    node.expand();
                },
                failure: function (response, options) {
                    treeFields.setLoading(false);
                    alert(response.statusText);
                }
            });

            return false;
        }
    },

    setQueryDefinition: function (queryDefinition) {
        if (queryDefinition !== undefined && queryDefinition.length > 0) {
            var matches = queryDefinition.match(/<Formula>(.+)<\/Formula>/);
            if (matches.length === 2) {
                return EvolveQueryEditor.model.Query.queryFromFormula(matches[1]);
            } else {
                EvolveQueryEditor.util.QAALogger.error(Ext.String.format("The given query definition is not correct: {0}"), queryDefinition);
                return false;
            }
        }
    },

    getQueryDefinition: function () {
        return Ext.String.format("<?xml version=\"1.0\" encoding=\"utf-8\"?><PersistentEvolveQuery xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">  <Bindings />  <Formula>=QAA_DR(\"{0}\",)</Formula></PersistentEvolveQuery>", EvolveQueryEditor.model.Query.queryToFormula())
    }
});